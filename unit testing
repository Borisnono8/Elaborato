
#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

// Test per la classe Item
TEST("Item Constructor"){
    Item item("Pane", "Alimentari", 2);
    REQUIRE(item.getName() == "Pane");
    REQUIRE(item.getCategory() == "Alimentari");
    REQUIRE(item.getQuantity() == 2);
    REQUIRE_FALSE(item.isComprato());
}
TEST("Item Constructor Negative Quantity", "[Item]") {
    REQUIRE_THROWS_AS(Item("Pane", "Alimentari", -1), std::invalid_argument);
}

TEST("Item Set Comprato", "[Item]") {
    Item item("Pane", "Alimentari", 2);
    item.setComprato(true);
    REQUIRE(item.isComprato());
}

// Test per la classe User
TEST("User Constructor", "[User]") {
    User user("Mario");
    REQUIRE(user.getNome() == "Mario");
    REQUIRE(user.getShoppingList() == nullptr);
}

TEST("User Subscribe To ShoppingList", "[User]") {
    User user("Mario");
    ShoppingList shoppingList;
    user.subscribeToShoppingList(&shoppingList);
    REQUIRE(user.getShoppingList() == &shoppingList);
}

TEST("User Unsubscribe From ShoppingList", "[User]") {
    User user("Mario");
    ShoppingList shoppingList;
    user.subscribeToShoppingList(&shoppingList);
    user.unsubscribeFromShoppingList();
    REQUIRE(user.getShoppingList() == nullptr);
}

// Test per la classe ConcreteUser
TEST("ConcreteUser Update", "[ConcreteUser]") {
    ShoppingList shoppingList;
    ConcreteUser user("Mario");
    user.subscribeToShoppingList(&shoppingList);
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.markItemAsPurchased("Pane");

    user.update();
    // Verifica che l'aggiornamento sia avvenuto correttamente (ad esempio, aggiungere un flag o controllare lo stato)
    REQUIRE(true); // Sostituire con un'asserzione reale basata sull'implementazione
}

// Test per la classe ShoppingList
TEST("ShoppingList Add Item", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    REQUIRE(shoppingList.getTotalItems() == 1);
}

TEST("ShoppingList Remove Item", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.removeItem("Pane");
    REQUIRE(shoppingList.getTotalItems() == 0);
}

TEST("ShoppingList Mark Item As Purchased", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.markItemAsPurchased("Pane");
    REQUIRE(shoppingList.getItemsToBuy() == 0);
}

TEST("ShoppingList Search Item", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    Item* item = shoppingList.searchItem("Pane");
    REQUIRE(item != nullptr);
    REQUIRE(item->getName() == "Pane");
}

TEST("ShoppingList Get Items By Category", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.addItem(Item("Sapone", "Igiene", 1));
    std::vector<Item> alimentari = shoppingList.getItemsByCategory("Alimentari");
    REQUIRE(alimentari.size() == 1);
    REQUIRE(alimentari[0].getName() == "Pane");
}

// Test per la classe Subject e Observer
class TestObserver : public Observer {
public:
    void update() override {
        updated = true;
    }
    bool updated = false;
};

TEST("Subject Add And Remove Observer", "[Subject]") {
    Subject subject;
    TestObserver observer;
    subject.addObserver(&observer);
    subject.notifyObservers();
    REQUIRE(observer.updated);

    observer.updated = false;
    subject.removeObserver(&observer);
    subject.notifyObservers();
    REQUIRE_FALSE(observer.updated);
}
