#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>
#include "ConcreteUser.h"
#include "Item.h"
#include "Observer.h"
#include "Shoppinglist.h"
#include "Subject.h"
#include "User.h"

// Test per la classe Item
TEST_CASE("Item Constructor", "[Item]") {
    Item item("Pane", "Alimentari", 2);
    REQUIRE(item.getName() == "Pane");
    REQUIRE(item.getCategory() == "Alimentari");
    REQUIRE(item.getQuantity() == 2);
    REQUIRE_FALSE(item.isComprato());
}

TEST_CASE("Item Constructor Negative Quantity", "[Item]") {
    REQUIRE_THROWS_AS(Item("Pane", "Alimentari", -1), std::invalid_argument);
}

TEST_CASE("Item Set Comprato", "[Item]") {
    Item item("Pane", "Alimentari", 2);
    item.setComprato(true);
    REQUIRE(item.isComprato());
}

// Test per la classe User
TEST_CASE("User Constructor", "[User]") {
    User user("Mario");
    REQUIRE(user.getNome() == "Mario");
    REQUIRE(user.getShoppingList() == nullptr);
}

TEST_CASE("User Subscribe To ShoppingList", "[User]") {
    User user("Mario");
    ShoppingList shoppingList;
    user.subscribeToShoppingList(&shoppingList);
    REQUIRE(user.getShoppingList() == &shoppingList);
}

TEST_CASE("User Unsubscribe From ShoppingList", "[User]") {
    User user("Mario");
    ShoppingList shoppingList;
    user.subscribeToShoppingList(&shoppingList);
    user.unsubscribeFromShoppingList();
    REQUIRE(user.getShoppingList() == nullptr);
}

// Test per la classe ConcreteUser
TEST_CASE("ConcreteUser Update", "[ConcreteUser]") {
    ShoppingList shoppingList;
    ConcreteUser user("Mario");
    user.subscribeToShoppingList(&shoppingList);
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.markItemAsPurchased("Pane");

    user.update();
    // Verifica che l'aggiornamento sia avvenuto correttamente (ad esempio, aggiungere un flag o controllare lo stato)
    REQUIRE(true); // Sostituire con un'asserzione reale basata sull'implementazione
}

// Test per la classe ShoppingList
TEST_CASE("ShoppingList Add Item", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    REQUIRE(shoppingList.getTotalItems() == 1);
}

TEST_CASE("ShoppingList Remove Item", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.removeItem("Pane");
    REQUIRE(shoppingList.getTotalItems() == 0);
}

TEST_CASE("ShoppingList Remove Non-Existent Item", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.removeItem("Latte"); // Prova a rimuovere un oggetto inesistente
    REQUIRE(shoppingList.getTotalItems() == 1); // La lista non deve cambiare
}

TEST_CASE("ShoppingList Mark Item As Purchased", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.markItemAsPurchased("Pane");
    REQUIRE(shoppingList.getItemsToBuy() == 0);
}

TEST_CASE("ShoppingList Mark Non-Existent Item As Purchased", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.markItemAsPurchased("Latte"); // Prova a marcare un oggetto inesistente
    REQUIRE(shoppingList.getItemsToBuy() == 1); // La lista non deve cambiare
}

TEST_CASE("ShoppingList Search Item", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    Item* item = shoppingList.searchItem("Pane");
    REQUIRE(item != nullptr);
    REQUIRE(item->getName() == "Pane");
}

TEST_CASE("ShoppingList Search Non-Existent Item", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    Item* item = shoppingList.searchItem("Latte"); // Prova a cercare un oggetto inesistente
    REQUIRE(item == nullptr);
}

TEST_CASE("ShoppingList Get Items By Category", "[ShoppingList]") {
    ShoppingList shoppingList;
    shoppingList.addItem(Item("Pane", "Alimentari", 2));
    shoppingList.addItem(Item("Sapone", "Igiene", 1));
    shoppingList.addItem(Item("Mele", "Frutta", 5));
    shoppingList.addItem(Item("Banane", "Frutta", 4));
    shoppingList.addItem(Item("Pera", "Frutta", 3));

    std::vector<Item> alimentari = shoppingList.getItemsByCategory("Alimentari");
    REQUIRE(alimentari.size() == 1);
    REQUIRE(alimentari[0].getName() == "Pane");

    std::vector<Item> frutta = shoppingList.getItemsByCategory("Frutta");
    REQUIRE(frutta.size() == 3); // Verifica che ci siano 3 oggetti nella categoria "Frutta"
    REQUIRE(frutta[0].getName() == "Mele");
    REQUIRE(frutta[1].getName() == "Banane");
    REQUIRE(frutta[2].getName() == "Pera");
}

// Test per la classe Subject e Observer
class TestObserver : public Observer {
public:
    void update() override {
        updated = true;
    }
    bool updated = false;
};

TEST_CASE("Subject Add And Remove Observer", "[Subject]") {
    Subject subject;
    TestObserver observer;
    subject.addObserver(&observer);
    subject.notifyObservers();
    REQUIRE(observer.updated);

    observer.updated = false;
    subject.removeObserver(&observer);
    subject.notifyObservers();
    REQUIRE_FALSE(observer.updated);
}
