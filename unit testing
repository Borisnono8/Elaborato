
#include <gtest/gtest.h>
#include "shooppinglist.h"

class OsservatoreMock : public Osservatore {
public:
    MOCK_METHOD(void, aggiorna, (), (override));
};

TEST(shooppinglistTest, AggiungiItem) {
    shooppinglist lista;
    OsservatoreMock osservatore;
    lista.aggiungiOsservatore(&osservatore);

    EXPECT_CALL(osservatore, aggiorna()).Times(1);

    lista.aggiungiItem(Item("Latte", 2));
    EXPECT_EQ(lista.getNumeroTotaleItems(), 1);
}

TEST(shooppinglistTest, RimuoviItem) {
    shooppinglist lista;
    OsservatoreMock osservatore;
    lista.aggiungiOsservatore(&osservatore);

    lista.aggiungiItem(Item("Latte", 2));
    lista.aggiungiItem(Item("Pane", 1));

    EXPECT_CALL(osservatore, aggiorna()).Times(1);

    lista.rimuoviItem("Latte");
    EXPECT_EQ(lista.getNumeroTotaleItems(), 1);
}

TEST(shooppinglistTest, ImpostaItemComeComprato) {
    shoopinglist lista;
    OsservatoreMock osservatore;
    lista.aggiungiOsservatore(&osservatore);

    lista.aggiungiItem(Item("Latte", 2));

    EXPECT_CALL(osservatore, aggiorna()).Times(1);

    lista.impostaItemComeComprato("Latte");
    EXPECT_EQ(lista.getItemsDaComprare(), 0);
}

TEST(shoopinglistTest, GetItemsDaComprare) {
    ListaDellaSpesa lista;
    lista.aggiungiItem(Item("Latte", 2));
    lista.aggiungiItem(Item("Pane", 1));

    lista.impostaItemComeComprato("Pane");

    EXPECT_EQ(lista.getItemsDaComprare(), 1);
}

TEST(shoopinglistTest, GetNumeroTotaleItems) {
    ListaDellaSpesa lista;
    lista.aggiungiItem(Item("Latte", 2));
    lista.aggiungiItem(Item("Pane", 1));

    EXPECT_EQ(lista.getNumeroTotaleItems(), 2);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
