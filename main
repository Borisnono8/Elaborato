#include <iostream>
#include "shoopinglist.h" 

class Osservatore {
public:
    virtual void aggiorna() = 0;
};

class OsservatoreConcreto : public Osservatore {
public:
    void aggiorna() override {
        std::cout << "La lista della spesa Ã¨ stata aggiornata." << std::endl;
    }
};

int main() {
    ListaDellaSpesa lista;
    OsservatoreConcreto osservatore;

    lista.aggiungiOsservatore(&osservatore);

    try {
        lista.aggiungiItem(Item("Latte", 2));
        lista.aggiungiItem(Item("Pane", 1));
        lista.aggiungiItem(Item("Uova", 12));

        std::cout << "Numero totale di articoli: " << lista.getNumeroTotaleItems() << std::endl;
        std::cout << "Articoli da comprare: " << lista.getItemsDaComprare() << std::endl;

        lista.impostaItemComeComprato("Pane");

        std::cout << "Articoli da comprare dopo aver comprato il pane: " << lista.getItemsDaComprare() << std::endl;

        lista.rimuoviItem("Uova");

        std::cout << "Numero totale di articoli dopo aver rimosso le uova: " << lista.getNumeroTotaleItems() << std::endl;
    } catch (const std::invalid_argument& e) {
        std::cerr << "Errore: " << e.what() << std::endl;
    }

    return 0;
}
